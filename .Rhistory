x<-c(1,3,5)
y<-c(3,2,10)
rbind(x,y)
x<-list(2,"a","b",TRUE)
x[[2]]
x<-1:4
y<-2
x+y
x<-c(3,5,1,10,12,6)
x[x==0]<6
x[x<0]<-0
x
x[x<6]<-0
x
ls
cd
cd
hw1_data <- read.csv("H:/Dropbox/CS/RProgramming/hw1_data.csv")
View(hw1_data)
Ozone <- hw1_data[,1]
isBda
is
isBad
bad<-is.na(Ozone)
Ozone[bad]
length(Ozone[bad])
mean(Ozone(!bad))
mean(Ozone[!bad])
temp <- hw1_data[Ozone>31 && Temp >90]
hw1_data[Ozone>31 && Temp >90]
temp = hw1_data
clear
temp <- hw1_data[which(hw1_data$Ozone>31 & hw1_data$Temp>90)]
temp1 <- hw1_data[which(hw1_data$Ozone>31 & hw1_data$Temp>90)]
temp1 <- hw1_data[which(hw1_data$Ozone>31 & hw1_data$Temp>90),]
mean(temp1["Solar.R"])
temp1["Solar.R"]
temp1["Solar.R"]
temp1
mean(temp1[,3])
mean(temp1[,2])
temp2 <- hw1_data[which(hw1_data$Month == 6),]
temp2["Temp"]
Temp_temp2 <- temp2["Temp"]
mean(Temp_temp2)
mean(Temp_temp2[1])
mean(Temp_temp2[1,])
mean(Temp_temp2[,1])
temp2 <- hw1_data[which(hw1_data$Month == 5),]
temp2
Ozone_temp2<- temp2["Ozone"]
max(Ozone_temp2[,1])
x<-c(4,"a",TRUE)
x<4
x>=4
x<-4
x<-4L
x<-c(4,TRUE)
x<-list(2,"a","b",TRUE)
x[[1]]
y<-x[[1]]
x<-c(3,5,1,10,12,6)
x[x<6] == 0
x<-c(4,"a",TRUE)
x<-c(1,3,5)
y<-c(3,2,10)
cbind(x,y)
rbind(x,y)
type(rbind(x,y))
class(rbind(x,y))
z = cbind(x,y)
x<-c(0.18,-1.54,0.42,0.95)
w<-c(2,1,3,1)
x-0.1471
w*(x-0.1471)*(x-0.1471)
sum(w*(x-0.1471)*(x-0.1471))
sum(w*(x-1.077)*(x-1.077))
sum(w*(x-0.0025)*(x-0.0025))
sum(w*(x-0.3)*(x-0.3))
?pnorm
qnorm(0.16,mean=80,sd=10)
qnorm(0.22,mean=80,sd=10)
qnorm(0.8,mean=80,sd=10)
pnorm(70,mean=80,sd=10)
qnorm(0.95,mean=1100,sd=75)
qnorm(0.95,mean=1100,sd=75/100)
qnorm(0.95,mean=1100,sd=sqrt(75^2/100))
ppois(3,lambda = 5)
ppois(3,lambda = 5*0.5)
pbinom(3,size=5,prob = 0.5)
1-0.8125
pnorm(14,mean=15,sd=sqrt(10^2/100))
pnorm(16,mean=15,sd=sqrt(10^2/100))
1-last
1-.Last.value
pnorm(-1)
pnorm(1)
pnorm(1)-pnorm(-1)
qnorm(0)
qnorm(0.5)
1/12/sqrt(1000)
sqrt(.Last.value)
sqrt(1/12)/sqrt(1000)
sqrt(1/12)
ppois(10,lambda = 5*3)
rm(list=ls())
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y~x)
newdata = data.frame(wt = 3)
predict(fit,newdata,interval="predict")
fit <- lm(y~x)
newdata = data.frame(x = 3)
predict(fit,newdata,interval="predict")
newdata = data.frame(x = 2)
predict(fit,newdata,interval="confidence")
library(UsingR)
install.packages("UsingR")
library(UsingR)
data(diamond)
rm(list=ls())
data(diamond)
?diamond
View(diamond)
x <- mtcars$wt
y <- mtcars$mpg
fit<-lm(y~x)
sumCoef<-summary(fit)$coefficients
sumCoef[2,1]+c(-1,1)*qt(.975,df=fit$df)*sumCoef[2,2]
summary(fit)
predict(fit,newdata,interval="predict")
newdata = data.frame(x = mean(x))
predict(fit,newdata,interval="predict")
predict(fit,newdata,interval="confident")
predict(fit,newdata,interval="confidence")
rm(fit)
rm(diamond)
rm(newdata)
rm(sumC)
rm(sumCoef)
fit_1(y~x)
fit_1<-lm(y~x)
y_real <- y
y_m1 <- fit_1$coef[1]+fit_1$coef[2]*x
y_m2 <- mean(y)
(y_real-y_m1)^2
sum(y_real-y_m1)^2
sum((y_real-y_m1)^2)
sum((y_real-y_m2)^2)
sum((y_real-y_m1)^2)/ sum((y_real-y_m2)^2)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
install.packages("caret")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
install.packages("AppliedPredictiveModeling")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names <- c("IL_11","IL_13","IL_16","IL_17E","IL_1alpha","IL_3","IL_4","IL_5","IL_6","IL_6_Receptor","IL_7","IL_8")
?train
trainFit <- train(diagnosis ~.,data = training(names),method = "glm")
trainFit <- train(diagnosis ~.,data = training[names],method = "glm")
class(training[names])
dim(training[names])
?solve
?get
source("cachematrix.R")
setwd("H:/Dropbox/CS/DataScience/RProgramming/ProgAssign/ProgrammingAssignment2")
source("cachematrix.R")
test <- matrix(2,2)
test[1,1] = 2
test[1,2] = 3
test <- matrix(1:2,1:2)
test <- matrix(c(2,3,2,2),nrow = 2,ncol=2, byrow =T)
makeCacheMatrix(test)
source("cachematrix.R")
makeCacheMatrix(test)
cacheSolve(test)
source("cachematrix.R")
makeCacheMatrix(test)
cacheSolve(test)
cacheSolve(test)
makeCacheMatrix(test)
makeCacheMatrix(test)
cacheSolve(test)
setwd("H:/Dropbox/CS/DataScience/RProgramming/ProgAssign/PA2")
source("makeVector.R")
source("cachemean.R")
testV = c(1,2,3)
makevector(testv)
makeVector(testv)
cachemean(testV)
a<- makeVector(testV)
cachemean(a)
a<- makeCacheMatrix(test)
cacheSolve(a)
a<- makeCacheMatrix(test)
cacheSolve(a)
?inverse
setwd("H:/Dropbox/CS/DataScience/RProgramming/ProgAssign/ProgrammingAssignment2")
source("cachematrix.R")
rm(a)
rm(testV)
a<- makeCacheMatrix(test)
cacheSolve(a)
?inverse
?inverse
??inverse
cacheSolve(a)
test
solve(test)
source("cachematrix.R")
cacheSolve(a)
